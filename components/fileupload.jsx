"use client";
import { useRef, useState } from "react";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/avikOFnWUGO
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

export function Fileupload() {
  const fileInputRef = useRef(null);
  const [files, setFiles] = useState([]);

  // Function to handle file selection
  const handleFileChange = (event) => {
    const selectedFiles = Array.from(event.target.files);
    setFiles((prevFiles) => [...prevFiles, ...selectedFiles]); // Append selected files
    console.log("Selected Files: ", files);
  };
  const handleButtonClick = () => {
    fileInputRef.current.click(); // Programmatically click the file input
  };

  return (
    <div className="max-w-2xl mx-auto p-0">
      <div className="bg-white shadow rounded-lg p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">PDF to Word</h2>
          <MoveHorizontalIcon className="w-6 h-6 text-muted-foreground" />
        </div>
        <div className="border-dashed border-2 border-blue-400 rounded-lg p-6 text-center bg-blue-50">
          <CloudUploadIcon className="w-12 h-12 text-blue-400 mx-auto mb-4" />
          <p className="text-blue-400 mb-2">
            Drag your files here, file size less than 15 MB or
          </p>
          {/* Hidden file input */}
          <input
            type="file"
            ref={fileInputRef}
            style={{ display: "none" }} // Hide the input
            onChange={handleFileChange}
            multiple
          />
          <Button
            className="bg-blue-400 text-white"
            onClick={handleButtonClick}
          >
            Browse File
          </Button>
        </div>
        <div className="flex justify-end items-end m-5">
          <Button>Begin Convert</Button>
        </div>
        <div className="mt-6 space-y-4">
          {files.length === 0 ? (
            <div></div>
          ) : (
            files.map((file, index) => (
              <div
                key={index}
                className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
              >
                <div className="flex items-center space-x-4">
                  {/* File Icon and Name */}
                  <FileIcon className="w-6 h-6 text-muted-foreground" />
                  <span>{file.name}</span>

                  {/* Convert Pending Badge */}
                  <Badge variant="secondary">Uploaded</Badge>

                  {/* File Size */}
                  <span>{(file.size / 1024).toFixed(2)} KB</span>

                  {/* Download Icon */}
                  <DownloadIcon className="w-6 h-6 text-muted-foreground" />
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
}

function CloudUploadIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" />
      <path d="M12 12v9" />
      <path d="m16 16-4-4-4 4" />
    </svg>
  );
}

function DownloadIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="7 10 12 15 17 10" />
      <line x1="12" x2="12" y1="15" y2="3" />
    </svg>
  );
}

function FileIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
    </svg>
  );
}

function MoveHorizontalIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="18 8 22 12 18 16" />
      <polyline points="6 8 2 12 6 16" />
      <line x1="2" x2="22" y1="12" y2="12" />
    </svg>
  );
}
